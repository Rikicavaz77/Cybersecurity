1) Inspecting the page, I notice that the title is "Sanremo injection", so I hypothesize this challenge involves an SQL injection.
2) I attempt to input some credentials to generate an error and identify the underlying DBMS.
3) I enter 1 as the username and three single quotes (''') as the password.
4) From the error page, I determine that the DBMS in use is sqlite3.
5) In sqlite3, comments are usually delimited by -- or /* */.
6) I proceed to input new credentials.
7) For the username, I use the following string:

admin' OR 1=1/*

1) I hypothesize that the SQL query is structured as: SELECT * FROM users WHERE username='' AND password='';
2) Once I inject my string, the application will check if the username is equal to admin or if 1=1 (a condition that is always true). The rest of the query will be ignored because it is treated as a comment.
3) I set the password to 1.
4) I retrieve the flag

Flag: spritz{Bl4nc0_m4dness}

Additional Steps:
1) I also wrote two Python scripts to extract the correct username and password.
2) The first script performs a brute-force attack to determine the length of the username. By knowing the length of the string and leveraging the SUBSTR function, I can reconstruct the username one character at a time.
3) The second script performs a brute-force attack to guess the password associated with the previously found username.
4) The script uses a character-by-character check based on ASCII values.
5) The numerical comparison enables the implementation of a binary search algorithm, reducing computational complexity.
6) With the retrieved username and password, I successfully log in.
